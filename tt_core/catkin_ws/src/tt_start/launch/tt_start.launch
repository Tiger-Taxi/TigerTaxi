<?xml version="1.0"?>
<launch>

    <arg name="simulate" default="true"/>
    <arg name="collect_map" default="false"/>
    <arg name="use_static_map" default="false"/>
    <arg name="slam_pkg" default="gmapping"/>
    <arg name="old_nav" default="false"/>

    <!-- Dependent on simulate (only true for simulation) -->
    <param name="/use_sim_time" value="$(arg simulate)"/>

    <!-- Simulation: Use Bag Files -->
    <group if="$(arg simulate)">
        <node pkg="rosbag" type="play" name="teabag" output="screen"
              args="--clock --keep-alive --rate=0.25 $(env TT_ROOT)/2018-10-18-14-39-25.bag"/>
    </group>

    <!-- GUI Nodes -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find tt_start)/map_costmaps_and_plans.rviz" output="screen"/>
    <node pkg="rqt_gui" type="rqt_gui" name="rqt"/>

    <!-- TFs, odom used in all operation -->
    <include file="$(find tt_start)/launch/tt_tf.launch"/>
    <include file="$(find tt_start)/launch/scan_matcher.launch"/>
    <include file="$(find tt_start)/launch/ekf.launch"/>
    <include file="$(find tt_start)/launch/p2l_2.launch"/>
    <node name="height_map" pkg="velodyne_height_map" type="heightmap_node"
          args="_height_threshold:=0.05 _full_clouds:=True _grid_dimensions:=250 _cell_size:=0.08"/>

    <!-- Safezone -->
    <node name="safezone" pkg="safezone" type="safezone"/>

    <!-- Unless we are simulating, launch sensor nodes -->
    <group unless="$(arg simulate)">
        <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch"/>
        <include file="$(find tt_start)/launch/urg_lidar.launch"/>
        <!-- Camera -->
        <include file="$(find video_stream_opencv)/launch/camera.launch">
            <!-- Topic name -->
            <arg name="camera_name" value="camera"/>
            <!-- 0: /dev/video0 -->
            <arg name="video_stream_provider" value="0"/>
            <!-- set camera fps to -->
            <arg name="set_camera_fps" value="30"/>
            <!-- we want only the latest frame -->
            <arg name="buffer_queue_size" value="1"/>
            <!-- frames per second to query the camera for -->
            <arg name="fps" value="30"/>
            <!-- frame_id for the camera (/camera/image) -->
            <arg name="frame_id" value="image"/>
            <!-- By value, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml
            To use your own fill this arg with the corresponding url, e.g.:
            "file:///$(find your_camera_package)/config/your_camera.yaml" -->
            <arg name="camera_info_url" value=""/> <!-- TODO may need to set this -->
            <!-- flip the image horizontally (mirror it) -->
            <arg name="flip_horizontal" value="false"/>
            <!-- flip the image vertically -->
            <arg name="flip_vertical" value="false"/>
            <!-- force width and height, 0 means no forcing -->
            <arg name="width" value="1920"/>
            <arg name="height" value="1080"/>
            <!-- if show a image_view window subscribed to the generated stream -->
            <arg name="visualize" value="false"/>
        </include>
        <!-- Arduinos -->
        <node pkg="rosdue" type="serial_due.py" name="due1" output="screen">
            <param name="port" value="/dev/ttyACM0"/>
        </node>
        <!-- DUE's were removed from the start up script due to odd interactions that caused them to crash and the cart to run away.  Addeding the to the start script requires code changes in the rosdue node  -->
        <!-- DUE1 and DUE2 may swap depending on which one connects to the PC first -->
        <!-- <node pkg="rosdue" type="serial_due.py" name="due2" output="screen">
            <param name="port" value="/dev/ttyACM1"/>
        </node> -->
    </group>

    <!-- If we are collecting a map (manual driving) -->
    <group if="$(arg collect_map)">
        <group if="$(eval slam_pkg == 'gmapping')">
            <include file="$(find tt_start)/launch/slam_gmapping.launch"/>
        </group>
        <group if="$(eval slam_pkg == 'loam')">
            <!-- <include file="$(find tt_start)/launch/loamadoonarooni.launch"/> -->
        </group>
    </group>
    <!-- Unless we are collecting a map (any driving mode) -->
    <group unless="$(arg collect_map)">
        <include file="$(find tt_start)/launch/move_base.launch">
            <arg name="static" value="$(arg use_static_map)"/>
        </include>
        <node pkg="tt_drive" type="cmd_vel_to_ackermann_drive.py" name="cmd_vel_converter" output="screen"/>
        <!-- NORMALLY THIS IS HOW COSTMAP IS USED: -->
        <group if="$(arg old_nav)">
            <node name="costmap_node" pkg="costmap_2d" type="costmap_2d_node">
                <rosparam file="$(find tt_start)/config/old_params.yaml" command="load" ns="costmap"/>
            </node>
        </group>
        <!-- Navigation within a static map -->
        <group unless="$(arg old_nav)">
            <group if="$(arg use_static_map)">
                <!-- Use AMCL for all SLAM packages -->
                <include file="$(find tt_start)/launch/amcl.launch"/>
                <group if="$(eval slam_pkg == 'gmapping')">
                    <!-- <node name="map_server" pkg="map_server" type="map_server" args="gmapping_map.yaml"/> -->
                </group>
                <group if="$(eval slam_pkg == 'loam')">
                    <!-- <node name="map_server" pkg="map_server" type="map_server" args="loam_map.yaml"/> -->
                </group>
            </group>
            <!-- Navigation within a live/persistent map -->
            <group unless="$(arg use_static_map)">
                <group if="$(eval slam_pkg == 'gmapping')">
                    <include file="$(find tt_start)/launch/slam_gmapping.launch"/>
                </group>
                <group if="$(eval slam_pkg == 'loam')">
                    <!-- <include file="$(find tt_start)/launch/loamadoonarooni.launch"/> -->
                </group>
            </group>
        </group>
    </group>

</launch>
